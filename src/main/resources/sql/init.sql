DROP TABLE t_data_source;

CREATE TABLE
IF NOT EXISTS `t_data_source` (
	`id` BIGINT (20) NOT NULL AUTO_INCREMENT COMMENT '主键',
	`data_source_name` VARCHAR (50) NOT NULL DEFAULT '' COMMENT '数据源名称',
	`driver_class_name` VARCHAR (50) NOT NULL DEFAULT '' COMMENT 'jdbc驱动类名',
	`url` VARCHAR (200) NOT NULL DEFAULT '' COMMENT 'ip或域名',
	`db_name` VARCHAR (20) NOT NULL DEFAULT '' COMMENT '数据库',
	`user_name` VARCHAR (100) NOT NULL DEFAULT '' COMMENT '用户名',
	`user_password` VARCHAR (50) NOT NULL DEFAULT '' COMMENT '密码',
	`data_status` TINYINT (4) NOT NULL DEFAULT '1' COMMENT '0:禁用,1:启用,2:已删除',
	`create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
	`update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
	PRIMARY KEY (`id`)
) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '数据库源';

REPLACE INTO `code_gen`.`t_data_source` (`id`, `data_source_name`, `driver_class_name`, `url`, `db_name`, `user_name`, `user_password`, `data_status`, `create_time`, `update_time`) VALUES ('1', 'code_gen', 'com.mysql.jdbc.Driver', 'jdbc:mysql://localhost:3306', 'code_gen', 'guest', 'guest123456', '1', '2018-08-10 14:54:32', '2018-08-16 01:08:40');
REPLACE INTO `code_gen`.`t_data_source` (`id`, `data_source_name`, `driver_class_name`, `url`, `db_name`, `user_name`, `user_password`, `data_status`, `create_time`, `update_time`) VALUES ('2', 'blog', 'com.mysql.jdbc.Driver', 'jdbc:mysql://localhost:3306', 'blog', 'guest', 'guest123456', '1', '2018-08-11 14:01:49', '2018-08-16 01:08:41');
REPLACE INTO `code_gen`.`t_data_source` (`id`, `data_source_name`, `driver_class_name`, `url`, `db_name`, `user_name`, `user_password`, `data_status`, `create_time`, `update_time`) VALUES ('3', 'mpys', 'com.mysql.jdbc.Driver', 'jdbc:mysql://localhost:3306', 'mpys', 'guest', 'guest123456', '1', '2018-08-13 20:28:50', '2018-08-16 01:08:43');

DROP TABLE t_template;

CREATE TABLE
IF NOT EXISTS `t_template` (
	`id` BIGINT (20) NOT NULL AUTO_INCREMENT COMMENT '主键',
	`group_id` BIGINT (20) NOT NULL DEFAULT 0 COMMENT '模板组id',
	`template_name` VARCHAR (100) NOT NULL DEFAULT '' COMMENT '模板名',
	`context` VARCHAR (5000) NOT NULL DEFAULT '' COMMENT '模板内容',
	`template_type` TINYINT (4) NOT NULL DEFAULT 1 COMMENT '1:java,2:xml,3:html,4:javascript',
	`file_name` VARCHAR (100) NOT NULL DEFAULT '' COMMENT '文件名',
	`data_status` TINYINT (4) NOT NULL DEFAULT 1 COMMENT '0:禁用,1:启用,2:已删除',
	`create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
	`update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
	PRIMARY KEY (`id`)
) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '模板信息';

REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('1', '1', 'controller', 'package ${package}.controller.${moduleName};\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport ${package}.dto.request.${moduleName}.${className}ReqDto;\nimport ${package}.dto.response.${moduleName}.${className}ResDto;\nimport ${package}.service.${moduleName}.${className}Service;\nimport ${package}.utils.ResultUtil;\nimport ${package}.ResultData;\n\nimport java.util.List;\n\n/**\n * ${comments}控制器\n *\n * @author ${author}\n * @date ${datetime}\n */\n@RestController\n@RequestMapping(\"${moduleName}\")\n@Api(description = \"${comments}接口\")\npublic class ${className}Controller {\n\n    @Autowired\n    private ${className}Service ${classname}Service;\n\n    /**\n     * 列表\n     */\n    @ApiOperation(value = \"获取${comments}数据列表\", notes = \"获取${comments}数据列表\")\n    @PostMapping(value = \"/list\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResultData<List<${className}ResDto>> list(@RequestBody ${className}ReqDto reqDto){\n        return ResultUtil.success(${classname}Service.select(reqDto));\n    }\n\n    /**\n     * 查询\n     */\n    @ApiOperation(value = \"获取${comments}数据\", notes = \"获取${comments}数据\")\n    @PostMapping(value = \"/get\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Result<${className}ResDto> get(@RequestBody ${className}ReqDto reqDto){\n        return ResultUtil.success(${classname}Service.get(reqDto));\n    }\n\n    /**\n     * 插入\n     */\n    @ApiOperation(value = \"插入${comments}数据\", notes = \"插入${comments}数据\")\n    @PostMapping(value = \"/insert\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Result<Void> insert(@RequestBody ${className}ReqDto reqDto){\n        return ResultUtil.success(${classname}Service.insert(reqDto));\n    }\n\n    /**\n     * 修改\n     */\n    @ApiOperation(value = \"修改${comments}数据\", notes = \"修改${comments}数据\")\n    @PostMapping(value = \"/update\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Result<Void> update(@RequestBody ${className}ReqDto reqDto){\n        return ResultUtil.success(${classname}Service.update(reqDto));\n    }\n\n    /**\n     * 删除\n     */\n    @ApiOperation(value = \"删除${comments}数据\", notes = \"删除${comments}数据\")\n    @PostMapping(value = \"/delete\", produces = MediaType.APPLICATION_JSON_VALUE)\n    public Result<Void> delete(@RequestBody ${className}ReqDto reqDto){\n        return ResultUtil.success(${classname}Service.delete(reqDto));\n    }\n}\n', '1', 'controller.${moduleName}', '${className}Controller.java', '1', '2018-08-10 17:09:17', '2018-08-16 01:09:28', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('2', '1', 'mapper', 'package ${package}.mapper.${moduleName};\n\nimport ${package}.model.${moduleName}.${className}Model;\nimport tk.mybatis.mapper.common.Mapper;\n\n/**\n * ${comments} mapper\n * \n * @author ${author}\n * @date ${datetime}\n */\npublic interface ${className}Mapper extends Mapper<${className}Model> {\n	\n}\n', '1', 'mapper.${moduleName}', '${className}Mapper.java', '1', '2018-08-10 22:17:41', '2018-08-16 01:09:27', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('3', '1', 'mapper.xml', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${package}.mapper.${moduleName}.${className}Mapper\">\n\n</mapper>', '2', 'mapper.${moduleName}', '${className}Mapper.xml', '1', '2018-08-10 22:20:43', '2018-08-16 01:09:26', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('4', '1', 'model', 'package ${package}.model.${moduleName};\n\n#if(${hasBigDecimal})\nimport java.math.BigDecimal;\n#end\n\nimport javax.persistence.Column;\nimport javax.persistence.Table;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport lombok.*;\n\n/**\n *\n * ${comments}模型\n * \n * @author ${author}\n * @date ${datetime}\n */\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@Table(name = \"${tableName}\")\npublic class ${className}Model {\n#foreach ($column in $columns)\n\n	/**\n	 * $column.comments\n	 */\n	#if($column.columnName == $pk.columnName)\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n	#end\n    @Column(name = \"$column.columnName\")\n	private $column.attrType $column.attrname;\n#end\n}\n', '1', 'model.${moduleName}', '${className}Model.java', '1', '2018-08-10 22:23:46', '2018-08-16 01:09:25', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('5', '1', 'reqDto', 'package ${package}.dto.request.${moduleName};\n\nimport io.swagger.annotations.ApiModelProperty;\n\n#if(${hasBigDecimal})\nimport java.math.BigDecimal;\n#end\n\nimport lombok.*;\nimport java.io.Serializable;\n\nimport ${package}.model.${moduleName}.${className}Model;\n\n/**\n *\n * ${comments}请求dto\n *\n * @author ${author}\n * @date ${datetime}\n */\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ${className}ReqDto implements Serializable {\n	#foreach ($column in $columns)\n\n    /**\n      * $column.comments\n      */\n    @ApiModelProperty(value = \"$column.comments\", name = \"$column.comments\")\n    private $column.attrType $column.attrname;\n	#end\n\n    public ${className}Model to() {\n            return ${className}Model.builder()\n		#foreach ($column in $columns)\n                .${column.attrname}(get${column.attrName}())\n		#end\n        .build();\n    }\n}\n', '1', 'dto.request.${moduleName}', '${className}ReqDto.java', '1', '2018-08-10 22:28:57', '2018-08-16 01:09:24', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('6', '1', 'resDto', 'package ${package}.dto.response.${moduleName};\n\nimport io.swagger.annotations.ApiModelProperty;\n\n#if(${hasBigDecimal})\nimport java.math.BigDecimal;\n#end\n\nimport lombok.*;\nimport java.io.Serializable;\n\nimport ${package}.model.${moduleName}.${className}Model;\n\n/**\n *\n * ${comments}返回dto\n *\n * @author ${author}\n * @date ${datetime}\n */\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ${className}ResDto implements Serializable {\n	#foreach ($column in $columns)\n\n    /**\n      * $column.comments\n      */\n    @ApiModelProperty(value = \"$column.comments\", name = \"$column.comments\")\n    private $column.attrType $column.attrname;\n	#end\n\n	public static ${className}ResDto get(${className}Model model) {\n		return ${className}ResDto.builder()\n		#foreach ($column in $columns)\n            .${column.attrname}(model.get${column.attrName}())\n		#end\n				.build();\n	}\n}\n', '1', 'dto.response.${moduleName}', '${className}ResDto.java', '1', '2018-08-10 22:30:10', '2018-08-16 01:09:23', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('7', '1', 'service', 'package ${package}.service.${moduleName};\n\nimport ${package}.dto.request.${moduleName}.${className}ReqDto;\nimport ${package}.dto.response.${moduleName}.${className}ResDto;\n\nimport java.util.List;\n\n/**\n * ${comments}接口\n *\n * @author ${author}\n * @date ${datetime}\n */\npublic interface ${className}Service {\n\n    /**\n    * 列表\n    */\n    List<${className}ResDto> select(${className}ReqDto reqDto);\n\n    /**\n    * 查询\n    */\n    ${className}ResDto get(${className}ReqDto reqDto);\n\n    /**\n    * 添加\n    */\n    int insert(${className}ReqDto reqDto);\n\n    /**\n    * 修改\n    */\n    int update(${className}ReqDto reqDto);\n\n    /**\n    * 删除\n    */\n    int delete(${className}ReqDto reqDto);\n}\n\n', '1', 'service.${moduleName}', '${className}Service.java', '1', '2018-08-10 22:31:06', '2018-08-16 01:09:22', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('8', '1', 'serviceImpl', 'package ${package}.service.impl.${moduleName};\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport ${package}.mapper.${moduleName}.${className}Mapper;\nimport ${package}.model.${moduleName}.${className}Model;\nimport ${package}.service.${moduleName}.${className}Service;\nimport ${package}.dto.request.${moduleName}.${className}ReqDto;\nimport ${package}.dto.response.${moduleName}.${className}ResDto;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\n/**\n * ${comments}服务\n *\n * @author ${author}\n * @date ${datetime}\n */\n@Service\npublic class ${className}ServiceImpl implements ${className}Service {\n\n    @Autowired\n    private ${className}Mapper ${classname}Mapper;\n\n    /**\n    * 列表\n    */\n    @Override\n    public List<${className}ResDto> select(${className}ReqDto reqDto) {\n        List<${className}Model> models = ${classname}Mapper.select(reqDto.to());\n        List<${className}ResDto> result = new ArrayList<>(20);\n        if (null != models) {\n            for (${className}Model model : models) {\n                result.add(${className}ResDto.get(model));\n            }\n        }\n        return result;\n    }\n\n    /**\n    * 查询\n    */\n    @Override\n    public ${className}ResDto get(${className}ReqDto reqDto) {\n        ${className}Model model = ${classname}Mapper.selectOne(reqDto.to());\n        return ${className}ResDto.get(model);\n    }\n\n    /**\n    * 添加\n    */\n    @Override\n    public int insert(${className}ReqDto reqDto) {\n        return ${classname}Mapper.insertSelective(reqDto.to());\n    }\n\n    /**\n    * 修改\n    */\n    @Override\n    public int update(${className}ReqDto reqDto) {\n        return ${classname}Mapper.updateByPrimaryKeySelective(reqDto.to());\n    }\n\n    /**\n    * 删除\n    */\n    @Override\n    public int delete(${className}ReqDto reqDto) {\n        return ${classname}Mapper.delete(reqDto.to());\n    }\n\n}\n', '1', 'service.impl.${moduleName}', '${className}ServiceImpl.java', '1', '2018-08-10 22:32:11', '2018-08-16 01:09:21', 'group');
REPLACE INTO `code_gen`.`t_template` (`id`, `group_id`, `template_name`, `context`, `template_type`, `package_path`, `file_name`, `data_status`, `create_time`, `update_time`, `module_name`) VALUES ('9', '2', 'xxxxx', '${moduleName}\n${package}\n${author}', '1', 'mypackage', 'Xwe.txt', '1', '2018-08-13 20:27:16', '2018-08-16 01:09:19', '');

DROP TABLE `t_template_group`;

CREATE TABLE
IF NOT EXISTS `t_template_group` (
	`id` BIGINT (20) NOT NULL AUTO_INCREMENT COMMENT '主键',
	`group_name` VARCHAR (20) NOT NULL DEFAULT '' COMMENT '模板组名称',
	`module_name` VARCHAR (20) NOT NULL DEFAULT '' COMMENT '模块名',
	`author` VARCHAR (20) NOT NULL DEFAULT '' COMMENT '作者',
	`table_prefix` VARCHAR (20) NOT NULL DEFAULT '' COMMENT '表前缀',
	`main_package` VARCHAR (50) NOT NULL DEFAULT '' COMMENT '主包名',
	`data_status` TINYINT (4) NOT NULL DEFAULT '1' COMMENT '0:禁用,1:启用,2:已删除',
	`create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
	`update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
	PRIMARY KEY (`id`)
) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '模板组';

REPLACE INTO `code_gen`.`t_template_group` (`id`, `group_name`, `module_name`, `author`, `table_prefix`, `main_package`, `data_status`, `create_time`, `update_time`) VALUES ('1', 'default', 'generator', 'hweiyu', 't_', 'com.hwy', '1', '2018-08-10 23:37:40', '2018-08-16 01:09:08');
REPLACE INTO `code_gen`.`t_template_group` (`id`, `group_name`, `module_name`, `author`, `table_prefix`, `main_package`, `data_status`, `create_time`, `update_time`) VALUES ('2', 'demo', 'xxx', 'demo_author', 't_', 'mainpackage', '1', '2018-08-11 00:36:21', '2018-08-16 01:09:09');